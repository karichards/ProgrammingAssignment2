m <- solve(data, ...)
## This code contains two functions that will allow the invert of a matrix
## to be computed and then held in Cashe for re-use.
##
## The purpose is that by re-using the cashed matrix it can save time
## re-computing the inverse.
##
## This is only applicable if the original matrix remains the same
## otherwise the inverse would need to be computed again.
## This function creates the object m that will be the cashe of the matrix
makeCacheMatrix <- function(x = matrix()) {
## Initialise m
m <- NULL
## SET
set <- function(y) {
x <<- y
m <<- NULL
}
## GET
get <- function() x
## SET INVERSE
setinverse <- function(solve) m <<- solve
## GET INVERSE
getinverse <- function() m
## LIST
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function will use the above function to get the cashed matrix
cacheSolve <- function(x, ...) {
## Get the inverse matrix from in case it has already be prepared
m <- x$getinverse()
## Test to see if NULL - if not then it is good to return
if(!is.null(m)){
message("Getting Cashed Data")
return(m)
}
## If m was NULL, then make m the inverse of the matrix provided
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
## now return m
m
}
makeCasheMatrix(matrix(c(2,4,3,1),nrow=2,ncol=2)  )
makeCasheMatrix(matrix(c(2,4,3,1),nrow=2,ncol=2)  )
## This code contains two functions that will allow the invert of a matrix
## to be computed and then held in Cashe for re-use.
##
## The purpose is that by re-using the cashed matrix it can save time
## re-computing the inverse.
##
## This is only applicable if the original matrix remains the same
## otherwise the inverse would need to be computed again.
## This function creates the object m that will be the cashe of the matrix
makeCacheMatrix <- function(x = matrix()) {
## Initialise m
m <- NULL
## SET
set <- function(y) {
x <<- y
m <<- NULL
}
## GET
get <- function() x
## SET INVERSE
setinverse <- function(solve) m <<- solve
## GET INVERSE
getinverse <- function() m
## LIST
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function will use the above function to get the cashed matrix
cacheSolve <- function(x, ...) {
## Get the inverse matrix from in case it has already be prepared
m <- x$getinverse()
## Test to see if NULL - if not then it is good to return
if(!is.null(m)){
message("Getting Cashed Data")
return(m)
}
## If m was NULL, then make m the inverse of the matrix provided
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
## now return m
m
}
casheSolve(matrix(c(1,2,3,4),nrow=2,ncol=2))
casheSolve
matrix(c(1,2,3,4),nrow=2,ncol=2)
solve(matrix(c(1,2,3,4),nrow=2,ncol=2))
casheSolve(matrix(c(1,2,3,4),nrow=2,ncol=2))
casheSolve
casheSolve()
?casheSolve
k2 <- mean(5)
k2
k2 <- function(x){ mean(x)}
k2(4)
matrix(c(1,2,3,4),nrow=2,ncol=2)
casheSolve(matrix(c(1,2,3,4),nrow=2,ncol=2))
find casheSolve
find(casheSolve)
k2(5)
casheSolve(matrix(c(1,2,3,4),nrow=2,ncol=2),)
makeCasheMatrix(matrix(c(1,2,3,4),nrow=2,ncol=2),)
makeCasheMatrix(matrix(c(1,2,3,4),nrow=2,ncol=2))
m
search()
environment(casheSolve)
environment(k2)
makeCacheMatrix <- function(x = matrix()) {
## Initialise m
m <- NULL
## SET
set <- function(y) {
x <<- y
m <<- NULL
}
## GET
get <- function() x
## SET INVERSE
setinverse <- function(solve) m <<- solve
## GET INVERSE
getinverse <- function() m
## LIST
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Get the inverse matrix from in case it has already be prepared
m <- x$getinverse()
## Test to see if NULL - if not then it is good to return the cashed matrix
if(!is.null(m)){
## and say that the cashed matrix is being use because
## otherwise the user will not be able to tell the difference
message("Getting Cashed Data")
return(m)
}
## If m was NULL, then make m the inverse of the matrix provided
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
## now return m
m
}
casheSolve(matrix(c(1,2,3,4),nrow=2,ncol=2))
?casheSolve
??casheSolve
RSiteSearch("casheSolve")
body(k2)
k2 <- function(mean(x))
k2 <- function(x){mean(x)}
body(k2)
body(casheSolve)
body(makeCasheMatrix)
cacheSolve(matrix(c(1,2,3,4),nrow=2,ncol=2))
cacheSolve(matrix(c(1,2,3,4),nrow=2,ncol=2))
## This code contains two functions that will allow the invert of a matrix
## to be computed and then held in Cashe for re-use.
##
## The purpose is that by re-using the cashed matrix it can save time
## re-computing the inverse.
##
## This is only applicable if the original matrix remains the same
## otherwise the inverse would need to be computed again.
## This function creates the object m that will be the cashe of the matrix
makeCacheMatrix <- function(x = matrix()) {
## Initialise m
m <- NULL
## SET
set <- function(y) {
x <<- y
m <<- NULL
}
## GET
get <- function() x
## SET INVERSE
setinverse <- function(solve) m <<- solve
## GET INVERSE
getinverse <- function() m
## LIST
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function will use the above function to get the cashed matrix
cacheSolve <- function(x, ...) {
## Get the inverse matrix from in case it has already be prepared
m <- x[getinverse()]
## Test to see if NULL - if not then it is good to return the cashed matrix
if(!is.null(m)){
## and say that the cashed matrix is being use because
## otherwise the user will not be able to tell the difference
message("Getting Cashed Data")
return(m)
}
## If m was NULL, then make m the inverse of the matrix provided
data <- x$get()
m <- solve(data, ...)
x[setinverse(m)]
## now return m
m
}
cacheSolve(matrix(c(1,2,3,4),nrow=2,ncol=2))
## This code contains two functions that will allow the invert of a matrix
## to be computed and then held in Cashe for re-use.
##
## The purpose is that by re-using the cashed matrix it can save time
## re-computing the inverse.
##
## This is only applicable if the original matrix remains the same
## otherwise the inverse would need to be computed again.
## This function creates the object m that will be the cache of the matrix
makeCacheMatrix <- function(x = matrix()) {
## Initialise m
m <- NULL
## SET
set <- function(y) {
x <<- y
m <<- NULL
}
## GET
get <- function() x
## SET INVERSE
setinverse <- function(solve) m <<- solve
## GET INVERSE
getinverse <- function() m
## LIST
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function will use the above function to get the cached matrix
cacheSolve <- function(x, ...) {
## Get the inverse matrix from in case it has already be prepared
m <- x$getinverse()
## Test to see if NULL - if not then it is good to return the cached matrix
if(!is.null(m)){
## and say that the cashed matrix is being use because
## otherwise the user will not be able to tell the difference
message("Getting Cached Data")
return(m)
}
## If m was NULL, then make m the inverse of the matrix provided
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
## now return m
m
}
cacheSolve(matrix(c(1,2,3,4),nrow=2,ncol=2))
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(c(1,2,3,4))
cachemean(1,2,3,4)
cachemean(4)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(4)
